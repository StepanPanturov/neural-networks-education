"""### Демонстрация процесса обучения"""
from rbfn_class import RBFNetwork
from generate_data.generate_demo_data import generate_demo_data
import matplotlib.pyplot as plt

def demo_training_process():
    """
    Демонстрация процесса обучения
    """
    print("=" * 60)
    print("ДЕМОНСТРАЦИЯ ПРОЦЕССА ОБУЧЕНИЯ РАДИАЛЬНО-БАЗИСНОЙ НЕЙРОННОЙ СЕТИ")
    print("=" * 60)

    print("\n ОПИСАНИЕ ЭКСПЕРИМЕНТА:")
    print("Данная демонстрация показывает, как RBF-сеть постепенно обучается")
    print("аппроксимировать синусоидальную функцию с добавленным шумом.")

    print("\n ВЫБРАННЫЕ ПАРАМЕТРЫ И ИХ ОБОСНОВАНИЕ:")
    print("─" * 50)

    print(" ДАННЫЕ:")
    print("  • Функция: синус (sin(x)) - классическая гладкая функция")
    print("  • Количество точек: 100 - достаточно для демонстрации")
    print("  • Уровень шума: 0.2 - имитирует реальные данные с погрешностями")
    print("  • Обоснование: синус хорошо подходит для демонстрации,")
    print("    так как имеет плавные изменения и периодичность")

    print("\n ПАРАМЕТРЫ RBF-СЕТИ:")
    print("  • Количество центров (нейронов): 7")
    print("    └─ Достаточно для аппроксимации синуса, но не избыточно")
    print("    └─ Позволяет увидеть влияние каждого центра")

    print("  • Ширина функций (sigma): 0.5")
    print("    └─ Оптимальная для данного диапазона данных")
    print("    └─ Обеспечивает достаточное перекрытие между центрами")

    print("  • Максимальное количество эпох: 100")
    print("    └─ Достаточно для демонстрации сходимости")
    print("    └─ Не слишком долго для наблюдения")

    print("  • Тип RBF-функции: Гауссовская (по умолчанию)")
    print("    └─ Наиболее популярная и интуитивно понятная")

    print("\n ЧТО ВЫ УВИДИТЕ В АНИМАЦИИ:")
    print("  • Синие точки - обучающие данные (с шумом)")
    print("  • Красная линия - текущая аппроксимация сети")
    print("  • Черные крестики - центры RBF-функций")
    print("  • MSE - среднеквадратичная ошибка (должна уменьшаться)")

    print("\n ПРОЦЕСС ОБУЧЕНИЯ:")
    print("  1. Центры размещаются случайно в пространстве данных")
    print("  2. На каждой эпохе веса корректируются методом наименьших квадратов")
    print("  3. Сеть постепенно улучшает аппроксимацию функции")
    print("  4. MSE уменьшается, показывая улучшение качества")

    print("\n" + "─" * 50)
    print("ЗАПУСК ДЕМОНСТРАЦИИ...")
    print("   (Анимация может занять несколько секунд для загрузки)")
    print("─" * 50)

    # Генерируем данные
    X, y = generate_demo_data(n_samples=100, noise=0.2, func_type='sin')

    print(f"\n Сгенерированы данные: {len(X)} точек в диапазоне [{X.min():.2f}, {X.max():.2f}]")

    # Создаем и обучаем модель с сохранением истории
    model = RBFNetwork(n_centers=7, sigma=0.5, max_epochs=100)

    print("Начинаем обучение с сохранением истории для анимации...")
    model.fit(X, y, animate=True)

    print(f"Обучение завершено! Итоговая MSE: {model.training_history[-1].get('mse', 'N/A'):.6f}")

    # Создаем анимацию
    print("Создаем анимацию процесса обучения...")
    ani = model.animate_training(X, y, interval=200)

    # Информация о сохранении (опционально)
    try:
        print("Сохраняем анимацию как 'rbf_training.mp4'...")
        ani.save('rbf_training.mp4', writer='ffmpeg')
        print("Анимация сохранена!")
    except Exception as e:
        print(f" Не удалось сохранить анимацию: {e}")
        print("   (Для сохранения нужен ffmpeg)")

    print("\n АНИМАЦИЯ ГОТОВА")
    print("   Наблюдайте, как красная линия постепенно приближается к синусоиде")
    print("   и как уменьшается значение MSE в левом верхнем углу.")

    # Отображаем анимацию
    plt.show()

    print("\n ИТОГИ ДЕМОНСТРАЦИИ:")
    print(f"  • Начальная MSE: {model.training_history[0].get('mse', 'N/A'):.6f}")
    print(f"  • Финальная MSE: {model.training_history[-1].get('mse', 'N/A'):.6f}")
    print(f"  • Количество эпох: {model.max_epochs}")
    print(f"  • Улучшение качества: {((model.training_history[0].get('mse', 1) - model.training_history[-1].get('mse', 0)) / model.training_history[0].get('mse', 1) * 100):.1f}%")

    print("\n ВЫВОДЫ:")
    print("  RBF-сеть успешно обучилась аппроксимировать функцию,")
    print("  демонстрируя способность к обучению на зашумленных данных.")
    print("=" * 60)
